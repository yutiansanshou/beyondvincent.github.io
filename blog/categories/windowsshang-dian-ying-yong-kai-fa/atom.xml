<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Windows商店应用开发 | 破船之家]]></title>
  <link href="http://BeyondVincent.github.io/blog/categories/windowsshang-dian-ying-yong-kai-fa/atom.xml" rel="self"/>
  <link href="http://BeyondVincent.github.io/"/>
  <updated>2014-02-21T15:11:01+08:00</updated>
  <id>http://BeyondVincent.github.io/</id>
  <author>
    <name><![CDATA[破船(BeyondVincent)]]></name>
    <email><![CDATA[beyondvincent@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Windows Store App开发[053]使用外部字体]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/06/06/82/"/>
    <updated>2013-06-06T00:00:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/06/06/82</id>
    <content type="html"><![CDATA[<h3>小引</h3>

<p>在我们写程序，有时候为了界面文字效果美观好看，需要使用第三方字体，而不是使用系统自带的字体。那么这该如何做呢？本文我就来介绍如何在Windows Store App开发中使用外部字体。</p>

<p>步骤如下：</p>

<h3><a name="t4"></a><a name="t4"></a>1、准备需要使用的字体文件</h3>

<p>我在网上找到了两个字体文件：</p>

<p>ARCADE_R.TTF和博洋规范字3500.TTF</p>

<p>将其下载下来。</p>

<h3><a name="t5"></a><a name="t4"></a>2、新建工程</h3>

<p>使用VS新建一个空白应用程序，命名为BV_UseFont。然后将第一步中下载的文件添加到工程中。在这里我添加到Fonts目录下。如下图：</p>

<p>&#160;</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/06/123.jpg"><img title="1" style="border-top: 0px; border-right: 0px; border-bottom: 0px; border-left: 0px; display: inline" border="0" alt="1" src="http://beyondvincent.com/wp-content/uploads/2013/06/1_thumb19.jpg" width="304" height="300" /></a></p>

<h3>3、使用外部字体</h3>

<p>第二步完成之后，我们就可以在程序中使用添加进来的字体了。
字体的使用方法有两种：</p>

<p>1、在xaml中直接设置</p>

<p>2、在cs代码中进行设置</p>

<p>下面我一一进行介绍</p>

<p>1、在xaml中直接设置：</p>

<p>如下代码：</p>

<p>&#160;</p>

<p><TextBlock Name="fontTest2" FontFamily="Fonts/博洋规范字3500.TTF#HAKUYOGuiFanZi3500" Text="BeyondVincent——博洋规范字3500——xaml设置" FontSize="50" ></TextBlock></p>

<p>&#160;</p>

<p>2、在cs代码中设置：</p>

<p>如下代码：</p>

<p>&#160;</p>

<p>FontFamily fontFamily = new FontFamily(@&ldquo;Fonts/博洋规范字3500.TTF#HAKUYOGuiFanZi3500&rdquo;);</p>

<p>fontTest.FontFamily = fontFamily;</p>

<p>&#160;</p>

<p>其中fontTest为TextBlock控件。</p>

<p>在上面两种设置中注意：</p>

<p>字体文件名#字体名称</p>

<p>其中字体名称查看方法：</p>

<p>双击打开字体文件，如下，有字体名称：</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/06/217.jpg"><img title="2" style="border-top: 0px; border-right: 0px; border-bottom: 0px; border-left: 0px; display: inline" border="0" alt="2" src="http://beyondvincent.com/wp-content/uploads/2013/06/2_thumb16.jpg" width="452" height="217" /></a></p>

<p>下面是运行效果：</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/06/313.jpg"><img title="3" style="border-top: 0px; border-right: 0px; border-bottom: 0px; border-left: 0px; display: inline" border="0" alt="3" src="http://beyondvincent.com/wp-content/uploads/2013/06/3_thumb13.jpg" width="682" height="92" /></a></p>

<p>代码下载</p>

<p><a href="https://github.com/BeyondVincent/WindowsStoreAppStepByStep/tree/master/UseFont" target="_blank"><img src="http://beyondvincent.com/wp-content/uploads/2013/05/code_xaml.png" /></a></p>

<p>&#160;</p>

<div style="text-align: left">
  <span style="color: #339966">本文由<span style="text-decoration: underline"><a href="http://beyondvincent.com/"><span style="color: #339966; text-decoration: underline">破船</span></a></span>原创●转载请注明出处●<time datetime="2013-05-18T17:37:00+08:00" data-updated="true">2012-06-06</span>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows Store App开发[052]变换(Transform)(1)简介]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/06/06/81/"/>
    <updated>2013-06-06T00:00:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/06/06/81</id>
    <content type="html"><![CDATA[<h3>小引</h3>

<p>在程序的开发过程中，变换是一个常用的操作，比如图片的缩放、旋转、移动等，都涉及到变换。在接下来的几篇文章中，我将对变换进行详细的介绍，欢迎你的阅读。</p>

<h3><a name="t4"></a>变换简介</h3>

<p>变换在数学上的定义是这样的：</p>

<p>非空集合A到自身的一个映射f：A→A称为集合A的变换。</p>

<p>变换是基于一个数学公式：从一个Point到新的一个Point。如果将某个对象所有的Point都应用到这个公式上，就可以达到移动、缩放、旋转等效果。</p>

<p>在Windows Runtime中，UIElement定义了三个属性来支持变换：</p>

<ol>
<li>RenderTransform——位置变换信息</li>
<li>RenderTransformOrigin——RenderTransform变换的原点信息</li>
<li>Projection——投影效果(三维效果)</li>
</ol>


<p>这些属性是定义在UIElement上的，可知，所有的Element都可以进行变换，例如：Image、TextBlock和Button。如果在Panel的子类(如Grid)上进行变换，那么这个子类所有的children都会同时被变换。</p>

<h3><a name="t5"></a>变换类型</h3>

<p>在Windows Runtime中，变换类型有如下：</p>

<ol>
<li>仿射变换——RenderTransform</li>
<li>非仿射变换——Projection</li>
</ol>


<h4><a name="t6"></a>仿射变换</h4>

<p>仿射变换的继承关系，如下图所示：</p>

<p>&#160;</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/06/120.jpg"><img title="1" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="1" src="http://beyondvincent.com/wp-content/uploads/2013/06/1_thumb18.jpg" width="412" height="677" /></a></p>

<p>从图中我们可以看到，仿射变换有7种类型（粉色部分），平移、缩放、旋转等，在后续的文章中，我会详细介绍如何使用它们。</p>

<p>粉色部分的排列顺序是按照数学公式复杂度排列的，TranslateTransform最简单，TransformGroup最复杂。</p>

<p>这7个类定义了二维仿射变换，对象变换之后，直线依旧是直线，平行关系也不会发生改变。只不过位置、大小、方向发生改变而已。</p>

<p>前面已经说了RenderTransform是UIElement的属性，它的类型是Transform。所以可以把这7种类型赋值给RenderTransform。</p>

<h4><a name="t7"></a>非仿射变换——Projection</h4>

<p>非仿射变换的继承关系，如下图所示：</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/06/216.jpg"><img title="2" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="2" src="http://beyondvincent.com/wp-content/uploads/2013/06/2_thumb15.jpg" width="388" height="366" /></a></p>

<p>非仿射变换主要用于三维视觉，在使用的时候，只需要将PlaneProjection或Matrix3DProjection赋值给UIElement的属性Projection即可。</p>

<p>注：在三维空间中，旋转总是基于某个轴（xyz）进行的。</p>

<p>很明显：在这种情况下，对象的平行关系是会改变的。</p>

<p>Projection变换也经常称为模拟3D变换，比如Flip(翻转)。</p>

<p>在后续的文章中，我会对Projection进行详细介绍。</p>

<h3><a name="t8"></a>变换演示</h3>

<p>下面我写了个小示例，来演示一下仿射变换和非仿射变换的效果。</p>

<p>左边是原始效果，中间是以正中心为原点，旋转45度，右边是翻转45度</p>

<p>&#160;</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/06/312.jpg"><img title="3" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="3" src="http://beyondvincent.com/wp-content/uploads/2013/06/3_thumb12.jpg" width="682" height="386" /></a></p>

<p>最后附上代码，方便大家自行演示效果</p>

<pre class="wp-code-highlight prettyprint linenums:1">&lt;?XML:NAMESPACE PREFIX = &quot;[default] http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot; NS = &quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot; /&gt;&lt;page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" mc:ignorable="d" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:local="using:BV_Transform_Introduction" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" x:class="BV_Transform_Introduction.MainPage"&gt;

    &lt;grid background="Green"&gt;
        &lt;grid.columndefinitions&gt;
            &lt;columndefinition&gt;&lt;/columndefinition&gt;
            &lt;columndefinition&gt;&lt;/columndefinition&gt;
            &lt;columndefinition&gt;&lt;/columndefinition&gt;
        &lt;/grid.columndefinitions&gt;
        &lt;textblock margin="128,76,127,632" fontsize="50" horizontalalignment="Center" grid.row="0" grid.column="0" text="原始效果"&gt;&lt;/textblock&gt;
        &lt;img grid.row="0" grid.column="0" source="1.jpg" /&gt;&lt;/img&gt;
        &lt;textblock margin="128,76,127,632" fontsize="50" horizontalalignment="Center" grid.row="0" grid.column="1" text="旋转效果"&gt;&lt;/textblock&gt;
        &lt;img grid.row="0" grid.column="1" source="1.jpg" /&gt;
            &lt;image.rendertransformorigin&gt;0.5 0.5&lt;/image.rendertransformorigin&gt;
            &lt;image.rendertransform&gt;
                &lt;rotatetransform angle="45"&gt;&lt;/rotatetransform&gt;
            &lt;/image.rendertransform&gt;
        &lt;/img&gt;
        &lt;textblock margin="128,76,127,632" fontsize="50" horizontalalignment="Center" grid.row="0" grid.column="2" text="翻转效果"&gt;&lt;/textblock&gt;
        &lt;img grid.row="0" grid.column="2" source="1.jpg" /&gt;
            &lt;image.projection&gt;
                &lt;planeprojection rotationy="60"&gt;&lt;/planeprojection&gt;
            &lt;/image.projection&gt;
        &lt;/img&gt;
        &lt;img width="549" height="92" margin="352,676,0,0" horizontalalignment="Left" grid.column="1" source="BeyondVincentWin8Logo.png" grid.columnspan="2" verticalalignment="Top" /&gt;
    &lt;/grid&gt;
&lt;/page&gt;</pre>


<p>代码下载</p>

<p><a href="https://github.com/BeyondVincent/WindowsStoreAppStepByStep/tree/master/TransformIntroduction" target="_blank"><img src="http://beyondvincent.com/wp-content/uploads/2013/05/code_xaml.png" /></a></p>

<p>&#160;</p>

<div style="text-align: left">
  <span style="color: #339966">本文由<span style="text-decoration: underline"><a href="http://beyondvincent.com/"><span style="color: #339966; text-decoration: underline">破船</span></a></span>原创●转载请注明出处●<time data-updated="true" datetime="2013-05-18T17:37:00+08:00">2012-06-06</span>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows Store App开发[051]数据绑定(3)通知属性改变]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/06/06/80/"/>
    <updated>2013-06-06T00:00:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/06/06/80</id>
    <content type="html"><![CDATA[<h3>小引</h3>

<p>当绑定源的某个属性改变了，有时候在绑定目标上需要得到实时更新，比如航班起飞时间延误了，那么需要实时的将此信息告知乘客。本文，我就来介绍一下通知属性改变。</p>

<h3><a name="t4"></a>简介</h3>

<p>属性改变的通知在程序开发过程中非常的实用，用上了该功能，我们就不用自己去改变UI界面更新等操作了。通过绑定引擎可以完成属性改变通知，不过开发者也需要在代码上做一些编写。</p>

<h3><a name="t5"></a>通知属性改变的关键技术</h3>

<p>实现INotifyPropertyChanged接口</p>

<p>发起PropertyChanged事件</p>

<h3><a name="t6"></a>实现步骤</h3>

<p>A、新建空白工程，名称为BV_Binding_INotifyPropertyChanged</p>

<p>B、在项目工程上单击右键，选择添加->选择类->输入People，然后确定</p>

<p>C、在People.cs文件实现INotifyPropertyChanged接口</p>

<p>代码如下：</p>

<p>注：此demo的作用是对年龄属性进行增加，在小于18时，为未成年，否则为成年</p>

<p>在引发PropertyChanged事件时，使用属性名作为参数。如果要想表示所有属性都改变了，那么可以用string.Empty当作参数。在下面的代码中，有具体的演示</p>

<pre class="wp-code-highlight prettyprint linenums:1">using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BV_Binding_INotifyPropertyChanged
{
    public class People : INotifyPropertyChanged
    {
        private int age = 0;

        private string typeLevel = &quot;未成年&quot;;

        public string TypeLevel
        {
            get { return typeLevel; }
            set
            {
                typeLevel = value;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public int Age
        {
            get { return age; }
            set
            {
                age = value;
                if (age &lt; 18)
                {
                    TypeLevel = &quot;未成年&quot;;
                }
                else
                { 
                    TypeLevel = &quot;成年&quot;;
                    NotifyPropertyChanged(string.Empty);
                    return;
                }

                NotifyPropertyChanged(&quot;Age&quot;);
            }
        }

        public void NotifyPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this,
                    new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}</pre>


<p>D、在MainPage.xaml中使用绑定</p>

<pre class="wp-code-highlight prettyprint linenums:1">&lt;?XML:NAMESPACE PREFIX = &quot;[default] http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot; NS = &quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot; /&gt;&lt;?XML:NAMESPACE PREFIX = &quot;[default] http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot; NS = &quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot; /&gt;&lt;?XML:NAMESPACE PREFIX = &quot;[default] http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot; NS = &quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot; /&gt;&lt;page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:local="using:BV_Binding_INotifyPropertyChanged" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" x:class="BV_Binding_INotifyPropertyChanged.MainPage" mc:ignorable="d"&gt;

    &lt;grid background="Green" name="grid"&gt;
        &lt;textblock foreground="White" fontsize="50" text="{Binding Age}" margin="462,193,556,485"&gt;&lt;/textblock&gt;
        &lt;textblock foreground="White" fontsize="50" text="{Binding TypeLevel}" margin="462,288,556,407"&gt;&lt;/textblock&gt;
        &lt;button content="+1" fontsize="50" margin="497,397,0,0" horizontalalignment="Left" height="84" verticalalignment="Top" width="247" click="Button_Click_1"&gt;
    &lt;/grid&gt;
&lt;/page&gt;

&lt;pre&gt;</pre>


<p></p></p>

<div>
</div>




<div>
</div>




<div>
</div>




<div>
</div>




<div>
</div>




<div>
</div>


<p></button></p>

<p>E、MainPage.xaml.cs中设置DataContent，并处理按钮事件</p>

<pre class="wp-code-highlight prettyprint linenums:1">using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Controls.Primitives;
using Windows.UI.Xaml.Data;
using Windows.UI.Xaml.Input;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Navigation;

// “空白页”项模板在 http://go.microsoft.com/fwlink/?LinkId=234238 上有介绍

namespace BV_Binding_INotifyPropertyChanged
{
    /// &lt;?XML:NAMESPACE PREFIX = &quot;[default] http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot; NS = &quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot; /&gt;&lt;summary&gt;
    /// 可用于自身或导航至 Frame 内部的空白页。
    /// &lt;/summary&gt;
    public sealed partial class MainPage : Page
    {
        People people = new People();
        public MainPage()
        {
            this.InitializeComponent();

            grid.DataContext = people;
        }

        /// &lt;summary&gt;
        /// 在此页将要在 Frame 中显示时进行调用。
        /// &lt;/summary&gt;
        /// &lt;param name="e" /&gt;描述如何访问此页的事件数据。Parameter
        /// 属性通常用于配置页。&lt;/param&gt;
        protected override void OnNavigatedTo(NavigationEventArgs e)
        {
        }

        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            ++people.Age;
        }
    }
}</pre>


<p>F、运行效果</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/06/311.jpg"><img title="3" style="border-top: 0px; border-right: 0px; border-bottom: 0px; border-left: 0px; display: inline" border="0" alt="3" src="http://beyondvincent.com/wp-content/uploads/2013/06/3_thumb11.jpg" width="443" height="398" /></a></p>

<p>代码下载</p>

<p><a href="https://github.com/BeyondVincent/WindowsStoreAppStepByStep/tree/master/BindingINotifyPropertyChanged" target="_blank"><img src="http://beyondvincent.com/wp-content/uploads/2013/05/code_xaml.png" /></a></p>

<p>&#160;</p>

<div style="text-align: left">
  <span style="color: #339966">本文由<span style="text-decoration: underline"><a href="http://beyondvincent.com/"><span style="color: #339966; text-decoration: underline">破船</span></a></span>原创●转载请注明出处●<time datetime="2013-05-18T17:37:00+08:00" data-updated="true">2012-06-06</span>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows Store App开发[050]数据绑定(2)转换器]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/06/06/79/"/>
    <updated>2013-06-06T00:00:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/06/06/79</id>
    <content type="html"><![CDATA[<h3>小引</h3>

<p>在数据绑定中，有时候我们要显示的内容跟绑定的源有所不同：比如：考生的分数60分以下为不及格或者糟糕、60-90为及格或还行，90分以上为优秀或非常棒。那么我们就需要对绑定源的数据进行处理。这篇文章，我就来说一说绑定中的转换器——通过转换器可以达到对数据的处理，以显示想要的内容。</p>

<h3><a name="t4"></a>简介</h3>

<p>由于<a href="http://beyondvincent.com/2013/06/06/windows-store-app%E5%BC%80%E5%8F%91049%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A1%E7%BB%91%E5%AE%9A%E6%A8%A1%E5%9E%8B/"><u>上一篇</u></a>文章中我只是介绍了绑定模型，没有对数据绑定进行介绍，那么我们先来看看下面这个图（来自msdn），以便对数据绑定有一个了解：</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/06/119.jpg"><img title="1" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="1" src="http://beyondvincent.com/wp-content/uploads/2013/06/1_thumb17.jpg" width="591" height="249" /></a></p>

<p>上面这个图描述了数据绑定的如下内容：</p>

<p>A、绑定目标——必须是依赖属性，一般来说，都是在FrameworkElement中。</p>

<p>B、绑定对象——连接绑定源与绑定目标的一个对象，绑定引擎通过绑定对象，对绑定源和绑定目标进行相应的处理</p>

<p>C、绑定源——也就是数据的来源，只要是CLR对象即可，不一定必须是依赖属性</p>

<p>E、转换器——对绑定源与绑定目标的值进行转换的接口</p>

<p>本文就是使用到上面的转换器。</p>

<h3><a name="t5"></a>使用转换器的关键技术</h3>

<p>A、实现IValueConverter接口</p>

<p>B、创建一个转换器，告诉绑定对象使用该转换器</p>

<h3><a name="t6"></a>实现步骤</h3>

<p>A、新建空白工程，名称为BV_Binding_Convert</p>

<p>B、在项目工程上单击右键，选择添加->选择类->输入DataConverter，然后确定</p>

<p>C、在DataConverter.cs文件实现IValueConverter接口</p>

<p>IValueConverter接口需要重写两个函数：</p>

<p>Convert——当数据从数据源传递过来了，绑定引擎会掉用该方法，并将数据返回给绑定目标</p>

<p>ConvertBack——与Convert相反：当数据从绑定目标传递过来了，绑定引擎会掉用该方法，并将数据返回给绑定源</p>

<p>注意：在下面的代码中，我还利用了parameter参数，这是在绑定的时候可以指定的参数。可以在这里做一些判断。我在这里根据这个参数回返回不同的值。</p>

<p>另：在代码中我使用的是默认绑定模型：单向绑定，所以不会用到ConvertBack，我也就没有做具体的实现代码</p>

<pre class="wp-code-highlight prettyprint linenums:1">using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Windows.UI.Xaml.Data;

namespace BV_Binding_Convert
{
    // Define the Convert method to change a DateTime object to // a month string.
    public class DataConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, string language)
        {
            string type = parameter.ToString();

            double count = (double)value;
            string temp;
            if (count &lt; 60)
            {
                if (type == &quot;1&quot;)
                    temp = &quot;不及格&quot;;
                else
                    temp = &quot;糟糕&quot;;
            }
            else if (count &gt;= 60 &amp;&amp; count &lt;= 90)
            {
                if (type == &quot;1&quot;)
                    temp = &quot;及格&quot;;
                else
                    temp = &quot;还行&quot;;
            }
            else
            {
                if (type == &quot;1&quot;)
                    temp = &quot;优秀&quot;;
                else
                    temp = &quot;非常棒&quot;;
            }

            return temp;
        }

        public object ConvertBack(object value, Type targetType, object parameter, string language)
        {
            throw new NotImplementedException();
        }
    }
}</pre>


<p>D、在xaml中使用绑定</p>

<p>我定义了一个Slider控件——当作绑定源</p>

<p>3个TextBlock当作绑定目标：1个是没有使用转换器，另外两个使用转换器，并携带了不同的参数。</p>

<p>具体代码如下：</p>

<pre class="wp-code-highlight prettyprint linenums:1">&lt;?XML:NAMESPACE PREFIX = &quot;[default] http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot; NS = &quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot; /&gt;&lt;page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" mc:ignorable="d" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:local="using:BV_Binding_Convert" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" x:class="BV_Binding_Convert.MainPage"&gt;

    &lt;page.resources&gt;
        &lt;local:dataconverter x:key="DataConverter1" /&gt;
    &lt;/page.resources&gt;

    &lt;!--LayoutRoot 是包含所有页面内容的根网格--&gt;
    &lt;grid background="Transparent" x:name="LayoutRoot"&gt;

        &lt;!--ContentPanel - 在此处放置其他内容--&gt;
        &lt;grid background="Green"&gt;
            &lt;slider margin="326,220,352,149" maximum="100" value="60" foreground="Red" name="slider"&gt;&lt;/slider&gt;
            &lt;textblock margin="554,286,542,254" text="{Binding ElementName=slider, Path=Value}" fontsize="50"&gt;&lt;/textblock&gt;
            &lt;textblock margin="554,366,542,174" text="{Binding ElementName=slider, Path=Value, Converter={StaticResource DataConverter1}, ConverterParameter=&#39;1&#39;}" fontsize="60"&gt;&lt;/textblock&gt;
            &lt;textblock margin="554,451,614,89" text="{Binding ElementName=slider, Path=Value, Converter={StaticResource DataConverter1}, ConverterParameter=&#39;2&#39;}" fontsize="60"&gt;&lt;/textblock&gt;
        &lt;/grid&gt;
    &lt;/grid&gt;
&lt;/page&gt;</pre>


<p>E、运行效果</p>

<p>用鼠标滑动Slider控件，则绑定目标会根据Slider不同的值进行改变更新。</p>

<p>&#160;</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/06/215.jpg"><img title="2" style="border-top: 0px; border-right: 0px; border-bottom: 0px; border-left: 0px; display: inline" border="0" alt="2" src="http://beyondvincent.com/wp-content/uploads/2013/06/2_thumb14.jpg" width="682" height="329" /></a></p>

<p>代码下载</p>

<p><a href="https://github.com/BeyondVincent/WindowsStoreAppStepByStep/tree/master/BindingConvert" target="_blank"><img src="http://beyondvincent.com/wp-content/uploads/2013/05/code_xaml.png" /></a></p>

<p>&#160;</p>

<div style="text-align: left">
  <span style="color: #339966">本文由<span style="text-decoration: underline"><a href="http://beyondvincent.com/"><span style="color: #339966; text-decoration: underline">破船</span></a></span>原创●转载请注明出处●<time data-updated="true" datetime="2013-05-18T17:37:00+08:00">2012-06-06</span>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows Store App开发[049]数据绑定(1)绑定模型]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/06/06/78/"/>
    <updated>2013-06-06T00:00:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/06/06/78</id>
    <content type="html"><![CDATA[<h3>在Windows Store app开发中，数据绑定非常的重要，它提供了一个简单的方法，使我们的程序可以很方便的显示数据并与数据进行交互。今天我先给大家简单的介绍一下Windows Store app中的数据绑定，在后面的文章中，我会展开详细的介绍。</h3>

<h3><a name="t4"></a>简介</h3>

<p>数据绑定在UI控件中显示数据是非常重要的一部分内容。当任意一个UI控件使用了绑定，那么它将会显示出相应的数据。当然，很重要的一个因素就是当绑定的数据发生了改变，此时UI控件显示的内容就会自动的改变。同样，当用户在UI控件上做了改变，这些变动的数据也会被自动保存到数据对象中。</p>

<p>在数据绑定中，每一个绑定都有一个Mode属性，该属性决定了数据流是如何走向的。在Windows Store Apps中，如果使用XAML和C#开发，有3中Mode可以使用：</p>

<p>OneWay绑定</p>

<p>TwoWay绑定</p>

<p>Onetime绑定</p>

<h3><a name="t5"></a>OneWay</h3>

<p>这是默认的绑定模型。OneWay绑定中，数据流的走向是从绑定源流向绑定目标的，不能反过来。当绑定源的数据发生了改变，那么绑定目标会得到更新。</p>

<p>示例：TextBox的Background为绑定目标，ListBox的SelectedItem.Content为绑定源</p>

<pre class="wp-code-highlight prettyprint linenums:1">&lt;grid background="BurlyWood"&gt;

    &lt;grid height="150" width="165"&gt;

        &lt;textbox background="{Binding ElementName=listBox, Path=SelectedItem.Content, Mode=OneWay}" height="82" fontsize="30" name="textBox" margin="0,-117,-218,0" verticalalignment="Top" foreground="Red" text="OneWay绑定模式"&gt;

        &lt;/textbox&gt;

        &lt;listbox fontsize="30" name="listBox" margin="0,0,-218,-70"&gt;

            &lt;listboxitem content="Green" /&gt;

            &lt;listboxitem content="Blue" isselected="True" /&gt;

            &lt;listboxitem content="Orange" /&gt;

        &lt;/listbox&gt;

    &lt;/grid&gt;

&lt;/grid&gt;</pre>


<p><a href="http://beyondvincent.com/wp-content/uploads/2013/06/118.jpg"><img title="1" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="1" src="http://beyondvincent.com/wp-content/uploads/2013/06/1_thumb16.jpg" width="546" height="420" /></a></p>

<h3>TwoWay</h3>

<p>就如名字一样，TwoWay绑定模式可以在绑定源于绑定目标之间相互同步数据。也就是说，无论是绑定源还是绑定目标，谁的数据改变了，另外一方的数据也会得到更新。</p>

<p>示例：</p>

<pre class="wp-code-highlight prettyprint linenums:1">&lt;grid background="Green"&gt;

    &lt;grid height="180" width="165"&gt;

        &lt;textbox height="56" fontsize="30" name="textBox" margin="0,-101,-192,0" verticalalignment="Top" text="{Binding ElementName=listBox,&#13;&#10;&#13;&#10;                    Path=SelectedItem.Content,&#13;&#10;&#13;&#10;                    Mode=TwoWay}"&gt;

        &lt;/textbox&gt;

        &lt;listbox fontsize="30" name="listBox" margin="0,0,-192,-62"&gt;

            &lt;listboxitem content="破船" /&gt;

            &lt;listboxitem content="BeyondVincent" /&gt;

            &lt;listboxitem content="小破船" /&gt;

            &lt;listboxitem content="小BeyondVincent" /&gt;

        &lt;/listbox&gt;

    &lt;/grid&gt;

&lt;/grid&gt;</pre>


<p>当选择ListBox中的数据时，TextBox中的内容也会跟着改变</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/06/214.jpg"><img title="2" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="2" src="http://beyondvincent.com/wp-content/uploads/2013/06/2_thumb13.jpg" width="510" height="451" /></a></p>

<p>当在TextBox中修改文本内容，ListBox中对应选中项也会改变[注意，TextBox需要失去Focus，才会触发数据改变]</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/06/310.jpg"><img title="3" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="3" src="http://beyondvincent.com/wp-content/uploads/2013/06/3_thumb10.jpg" width="553" height="456" /></a></p>

<h3>OneTime</h3>

<p>OneTime绑定模式，数据流是从绑定源到绑定目标的，并且只有一次。当绑定源的数据第一次发生改变时，绑定目标会得到更新。以后绑定源再怎么改变，绑定目标都不会更新。当需要查看数据首次加载情况时，可以选择这种模式。</p>

<p>示例：</p>

<pre class="wp-code-highlight prettyprint linenums:1">&lt;grid background="Green"&gt;

    &lt;stackpanel verticalalignment="Center" orientation="Vertical"&gt;

        &lt;slider background="Wheat" margin="593,0,354,0" value="50" maximum="100" minimum="1" x:name="sliderOneTimeDataSource" /&gt;

        &lt;textbox height="86" text="{Binding ElementName=sliderOneTimeDataSource, Path=Value, Mode=OneTime}" margin="608,0,354,0" fontsize="50" x:name="tbOneTimeDataBound" /&gt;

    &lt;/stackpanel&gt;

&lt;/grid&gt;</pre>


<p>当源数据确定后，绑定就已经完成了。所以之后Slider再怎么改变数据，都不会影响到TextBox的内容。</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/06/410.jpg"><img title="4" style="border-top: 0px; border-right: 0px; border-bottom: 0px; border-left: 0px; display: inline" border="0" alt="4" src="http://beyondvincent.com/wp-content/uploads/2013/06/4_thumb10.jpg" width="531" height="273" /></a></p>

<p>代码下载</p>

<p><a href="https://github.com/BeyondVincent/WindowsStoreAppStepByStep/tree/master/BindingMode" target="_blank"><img src="http://beyondvincent.com/wp-content/uploads/2013/05/code_xaml.png" /></a></p>

<p>&#160;</p>

<div style="text-align: left">
  <span style="color: #339966">本文由<span style="text-decoration: underline"><a href="http://beyondvincent.com/"><span style="color: #339966; text-decoration: underline">破船</span></a></span>原创●转载请注明出处●<time datetime="2013-05-18T17:37:00+08:00" data-updated="true">2012-06-06</span>
</div>



]]></content>
  </entry>
  
</feed>
