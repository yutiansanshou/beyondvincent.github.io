<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS设计模式 | 破船之家]]></title>
  <link href="http://BeyondVincent.github.io/blog/categories/iosshe-ji-mo-shi/atom.xml" rel="self"/>
  <link href="http://BeyondVincent.github.io/"/>
  <updated>2014-03-17T15:05:15+08:00</updated>
  <id>http://BeyondVincent.github.io/</id>
  <author>
    <name><![CDATA[破船(BeyondVincent)]]></name>
    <email><![CDATA[beyondvincent@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS设计模式(03):工厂方法]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/05/16/23/"/>
    <updated>2013-05-16T00:00:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/05/16/23</id>
    <content type="html"><![CDATA[<h2><strong><span style="color: #339966;">什么是工厂方法？</span></strong></h2>

<p>GOF是这样描述工厂模式的：</p>

<blockquote><p>Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.</p></blockquote>

<p>在基类中定义创建对象的一个接口，让子类决定实例化哪个类。工厂方法让一个类的实例化延迟到子类中进行。</p>

<p>工厂方法要解决的问题是对象的创建时机，它提供了一种扩展的策略，很好地符合了开放封闭原则。工厂方法也叫做虚构造器（Virtual Constructor）。</p>

<p>如下图所示，是工厂方法的类结构图：<a href="http://beyondvincent.com/wp-content/uploads/2013/05/QQ20130516-4.png"><img class="alignnone size-full wp-image-600" alt="QQ20130516-4" src="http://beyondvincent.com/wp-content/uploads/2013/05/QQ20130516-4.png" width="829" height="300" /></a></p>

<p><strong style="font-size: 1.5em;"><span style="color: #339966;">什么时候使用工厂方法？</span></strong></p>

<p>当是如下情况是，可以使用工厂方法：</p>

<ol>
<li>一个类不知道它所必须创建的对象的类时</li>
<li>一个类希望有它的子类决定所创建的对象时</li>
</ol>


<p>更多关于工厂方法的介绍，可以参考本文最后给出的参考内容。下面我们就来看看在iOS中工厂方法的一种实现方法。</p>

<h2><strong><span style="color: #339966;">iOS中工厂方法的实现</span></strong></h2>

<p>如下有一个类图，该图描述了下面即将实现的工厂方法（利用工厂方法，创建出不同的形状）。其中BVShapeFactory为工厂方法的基类，BVShape为形状的基类，BVClient通过BVShapeFactory，利用 BVShapeFactory的子类（BVCircleShapeFactory和BVSquareShapeFactory）分别创建出BVCircleShape和BVSquareShape。</p>

<h2><a href="http://beyondvincent.com/wp-content/uploads/2013/05/factory-method-pattern.png"><img class="alignnone size-full wp-image-599" title="点击图片查看大图" alt="factory-method-pattern" src="http://beyondvincent.com/wp-content/uploads/2013/05/factory-method-pattern.png" width="1181" height="384" /></a></h2>

<p>如下图，是在Xcode中创建的相关文件</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/05/QQ20130516-5.png"><img class="alignnone size-full wp-image-606" alt="QQ20130516-5" src="http://beyondvincent.com/wp-content/uploads/2013/05/QQ20130516-5.png" width="261" height="426" /></a></p>

<p>具体实现步骤如下（建议下载本文最后给出的代码实例，用Xcode查阅代码）：</p>

<ol>
<li>创建一个形状基类BVShape</li>
</ol>


<p>该类中定义了形状的基本行为和属性，如下代码所示：</p>

<p>BVShape.h</p>

<pre class="wp-code-highlight prettyprint linenums:1">//
//  BVShape.h
//  FactoryMethodPattern
//
//  Created by BeyondVincent on 13-5-15.
//  Copyright (c) 2013年 BeyondVincent. All rights reserved.
//

#define BV_Exception_Format @"在%@的子类中必须override:%@方法"

@interface BVShape : NSObject

@property (nonatomic, weak)NSString *name;

// 子类必须重写这个draw方法，否则会抛出异常错误
-(void)draw;

@end</pre>


<p>BVShape.m</p>

<pre class="wp-code-highlight prettyprint linenums:1">//
//  BVShape.m
//  FactoryMethodPattern
//
//  Created by BeyondVincent on 13-5-15.
//  Copyright (c) 2013年 BeyondVincent. All rights reserved.
//

#import "BVShape.h"

@implementation BVShape

-(id)init
{
   self = [super init];
    if (self) {
        // 做一些初始化任务
    }
    return self;
}

-(void)draw
{
    // 如果是通过BVShape的实例调用此处的draw，则绘制一个BVShape图形
    if ([self isMemberOfClass:[BVShape class]]) {
        NSLog(@"绘制一个BVShape图形");
    } else {
        // 如果是通过BVShape子类的实例调用了此处的draw，则抛出一个异常：表明子类并没有重写draw方法。
        // 注：在OC中并没有abstract class的概念，只有protocol，如果在基类中只定义接口(没有具体方法的实现)，
        //    则可以使用protocol，这样会更方便。 
        [NSException raise:NSInternalInconsistencyException
                    format:BV_Exception_Format, [NSString stringWithUTF8String:object_getClassName(self)], NSStringFromSelector(_cmd)];
    }
}

@end</pre>


<p>在上面的代码中定义了一个draw方法，为了让子类必须实现该方法，在BVShape中做了特殊处理，具体内容可以看上面的代码，已经有注视了。</p>

<ol start="2">
  <li>
    子类化形状基类
  </li>
</ol>


<p>首先子类化一个圆形类：BVCircleShape。</p>

<p>BVCircleShape.h</p>

<pre class="wp-code-highlight prettyprint linenums:1">//
//  BVCircleShape.h
//  FactoryMethodPattern
//
//  Created by BeyondVincent on 13-5-15.
//  Copyright (c) 2013年 BeyondVincent. All rights reserved.
//

#import "BVShape.h"

@interface BVCircleShape : BVShape

@end</pre>


<p>BVCircleShape.m</p>

<pre class="wp-code-highlight prettyprint linenums:1">//
//  BVCircleShape.m
//  FactoryMethodPattern
//
//  Created by BeyondVincent on 13-5-15.
//  Copyright (c) 2013年 BeyondVincent. All rights reserved.
//

#import "BVCircleShape.h"

@implementation BVCircleShape

-(void)draw
{
    NSLog(@"绘制一个BVCircleShape图形");
}

@end</pre>


<p>在上面的子类中，重写了基类的draw方法。同样，我们再子类化一个正方形类，并重写draw方法，如下代码所示：</p>

<p>BVSquareShape.h</p>

<pre class="wp-code-highlight prettyprint linenums:1">//
//  BVSquareShape.h
//  FactoryMethodPattern
//
//  Created by BeyondVincent on 13-5-15.
//  Copyright (c) 2013年 BeyondVincent. All rights reserved.
//

#import "BVShape.h"

@interface BVSquareShape : BVShape

@end</pre>


<p>BVSquareShape.m</p>

<pre class="wp-code-highlight prettyprint linenums:1">//
//  BVSquareShape.m
//  FactoryMethodPattern
//
//  Created by BeyondVincent on 13-5-15.
//  Copyright (c) 2013年 BeyondVincent. All rights reserved.
//

#import "BVSquareShape.h"

@implementation BVSquareShape

-(void)draw
{
    NSLog(@"绘制一个BVSquareShape图形");
}

@end</pre>




<ol start="3">
  <li>
     创建一个工厂方法的基类BVShapeFactory
  </li>
</ol>


<p>BVShapeFactory.h</p>

<pre class="wp-code-highlight prettyprint linenums:1">//
//  BVShapeFactory.h
//  FactoryMethodPattern
//
//  Created by BeyondVincent on 13-5-15.
//  Copyright (c) 2013年 BeyondVincent. All rights reserved.
//

#import "BVShape.h"

@interface BVShapeFactory : NSObject

-(BVShape *) factoryMethod;

@end</pre>


<p>BVShapeFactory.m</p>

<pre class="wp-code-highlight prettyprint linenums:1">//
//  BVShapeFactory.m
//  FactoryMethodPattern
//
//  Created by BeyondVincent on 13-5-15.
//  Copyright (c) 2013年 BeyondVincent. All rights reserved.
//

#import "BVShapeFactory.h"

@implementation BVShapeFactory

-(BVShape *)factoryMethod
{
    // 在此处，子类必须重写factoryMethod方法。当然，在工厂模式中，也可以在此处返回一个默认的Product。
    // 如果是通过BVShapeFactory子类的实例调用了此处的factoryMethod，则抛出一个异常：表明子类并没有重写factoryMethod方法。
    [NSException raise:NSInternalInconsistencyException
                format:BV_Exception_Format, [NSString stringWithUTF8String:object_getClassName(self)], NSStringFromSelector(_cmd)];

    // 下面这个return语句只是为了消除警告，实际上永远都不会执行到这里。
    return nil;
}

@end</pre>


<p>在上面的代码中，定义了一个factoryMethod，该类的子类必须实现该方法，通过实现该方法，返回一个具体的形状对象。下面来看看该类的子类化。</p>

<ol start="4">
  <li>
    子类化工厂方法的基类
  </li>
</ol>


<p>首先子类化一个圆形工厂方法BVCircleShapeFactory：</p>

<p>BVCircleShapeFactory.h</p>

<pre class="wp-code-highlight prettyprint linenums:1">//
//  BVCircleShapeFactory.h
//  FactoryMethodPattern
//
//  Created by BeyondVincent on 13-5-15.
//  Copyright (c) 2013年 BeyondVincent. All rights reserved.
//

#import "BVShapeFactory.h"
#import "BVCircleShape.h"

@interface BVCircleShapeFactory : BVShapeFactory

@end</pre>


<p>BVCircleShapeFactory.m</p>

<pre class="wp-code-highlight prettyprint linenums:1">//
//  BVCircleShapeFactory.m
//  FactoryMethodPattern
//
//  Created by BeyondVincent on 13-5-15.
//  Copyright (c) 2013年 BeyondVincent. All rights reserved.
//

#import "BVCircleShapeFactory.h"

@implementation BVCircleShapeFactory

-(BVShape *)factoryMethod
{
    return [[BVCircleShape alloc] init];
}

@end</pre>


<p>如上代码所示，重写了factoryMethod，返回一个BVCircleShape实例。下面来看看另外一个子类BVSquareShapeFactory：</p>

<p>BVSquareShapeFactory.h</p>

<pre class="wp-code-highlight prettyprint linenums:1">//
//  BVSquareShapeFactory.h
//  FactoryMethodPattern
//
//  Created by BeyondVincent on 13-5-15.
//  Copyright (c) 2013年 BeyondVincent. All rights reserved.
//

#import "BVShapeFactory.h"
#import "BVSquareShape.h"

@interface BVSquareShapeFactory : BVShapeFactory

@end</pre>


<p>BVSquareShapeFactory.m</p>

<pre class="wp-code-highlight prettyprint linenums:1">//
//  BVSquareShapeFactory.m
//  FactoryMethodPattern
//
//  Created by BeyondVincent on 13-5-15.
//  Copyright (c) 2013年 BeyondVincent. All rights reserved.
//

#import "BVSquareShapeFactory.h"

@implementation BVSquareShapeFactory

-(BVShape *)factoryMethod
{
    return [[BVSquareShape alloc] init];
}

@end</pre>


<p>该子类返回的是一个BVSquareShape实例。</p>

<ol start="5">
  <li>
    工厂方法的使用
  </li>
</ol>


<p>定义一个BVClient类，在该类中演示工厂方法的使用。代码如下：</p>

<p>BVClient.h</p>

<pre class="wp-code-highlight prettyprint linenums:1">//
//  BVClient.h
//  FactoryMethodPattern
//
//  Created by BeyondVincent on 13-5-15.
//  Copyright (c) 2013年 BeyondVincent. All rights reserved.
//

@interface BVClient : NSObject

-(void)doSomething;

@end</pre>


<p>BVClient.m</p>

<pre class="wp-code-highlight prettyprint linenums:1">//
//  BVClient.m
//  FactoryMethodPattern
//
//  Created by BeyondVincent on 13-5-15.
//  Copyright (c) 2013年 BeyondVincent. All rights reserved.
//

#import "BVClient.h"

#import "BVShapeFactory.h"
#import "BVCircleShapeFactory.h"
#import "BVSquareShapeFactory.h"

#import "BVShape.h"
#import "BVCircleShape.h"
#import "BVSquareShape.h"

@implementation BVClient

-(void)doSomething
{
    // 工厂方法的实例化
    BVShapeFactory *circleShapefactory = [[BVCircleShapeFactory alloc] init];
    BVShapeFactory *squareShapefactory = [[BVSquareShapeFactory alloc] init];

    // 通过工厂方法实例化对应的形状
    BVShape *circleShape = [circleShapefactory factoryMethod];
    BVShape *squareShape = [squareShapefactory factoryMethod];

    // 调用形状的方法
    [circleShape draw];
    [squareShape draw];
}

@end</pre>


<p>如上代码所示，首先实例化两个工厂方法，并通过工厂方法创建出对应的形状，最后调用形状的draw方法进行测试。会在控制台窗口输出如下内容：</p>

<pre class="wp-code-highlight prettyprint linenums:1">2013-05-16 10:12:46.292 FactoryMethodPattern[2845:c07] 绘制一个BVCircleShape图形
2013-05-16 10:12:46.295 FactoryMethodPattern[2845:c07] 绘制一个BVSquareShape图形</pre>


<h2><span style="color: #339966;"><strong>代码实例</strong></span></h2>

<p>本文涉及到的相关实例代码和PDF归档可以到点击下图下载：</p>

<p><a href="https://github.com/BeyondVincent/ios_patterns/tree/master/FactoryMethodPattern" target="_blank"><img alt="代码下载" src="http://beyondvincent.com/wp-content/uploads/2013/05/5555.png" width="150" height="150" /></a>            <a href="https://github.com/BeyondVincent/ios_patterns/raw/master/FactoryMethodPattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20For%20iOS-03-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95.pdf" target="_blank"><img alt="pdf-icon" src="http://beyondvincent.com/wp-content/uploads/2013/05/pdf-icon.png" width="150" height="150" /></a></p>

<h2><span style="color: #339966;"><strong>参考</strong></span></h2>

<p>在学习工厂方法时，参考了如下一些文章和视频：</p>

<p><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://zh.wikipedia.org/wiki/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95" target="_blank"><span style="color: #339966; text-decoration: underline;">工厂方法</span></a></span></span>wiki上对工厂方法的介绍<br/>
<span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://developer.apple.com/library/ios/#documentation/General/Conceptual/CocoaEncyclopedia/ClassFactoryMethods/ClassFactoryMethods.html" target="_blank"><span style="color: #339966; text-decoration: underline;">Class Factory Methods</span></a> </span></span>苹果官网对类工厂方法的介绍<br/>
<span style="text-decoration: underline; color: #339966;"><span style="text-decoration: underline;"><span style="text-decoration: underline;"><a href="http://maleevdimka.wordpress.com/2013/01/23/ios-patterns-fabric-method/" target="_blank"><span style="color: #339966; text-decoration: underline;">iOS Patterns. Factory Method</span></a></span></span></span><span style="color: #000000;">(一篇介绍工厂方法的文章，俄文，需要楼梯)</span><br/>
<span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://my.safaribooksonline.com/book/programming/objective-c/9781430233305/chapter-4-factory-method/what_is_the_factory_method_pattern_quest" target="_blank"><span style="color: #339966; text-decoration: underline;">What Is the Factory Method Pattern?</span></a></span></span>（Pro Objective-C Design Patterns for iOS书中对工厂方法的介绍）<br/>
<span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://terrylee.cnblogs.com/archive/2006/01/04/310716.html " target="_blank"><span style="color: #339966; text-decoration: underline;">.NET设计模式（5）：工厂方法模式（Factory Method）</span></a></span></span><br/>
<span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://blog.csdn.net/cjjky/article/details/7314118" target="_blank"><span style="color: #339966; text-decoration: underline;">java实现工厂方法</span></a></span></span><br/>
<span style="text-decoration: underline; color: #339966;"><a href="http://www.youtube.com/watch?feature=player_detailpage&v=cDF5tyiamww" target="_blank"><span style="color: #339966; text-decoration: underline;">JAVA: Factory Method Design Pattern</span></a></span><span style="color: #000000;">youtube上一个关于工厂方法的视频介绍</span><br/>
<span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://stackoverflow.com/questions/3653929/iphone-sdk-difference-between-iskindofclass-and-ismemberofclass" target="_blank"><span style="color: #339966; text-decoration: underline;">iphone-sdk-difference-between-iskindofclass-and-ismemberofclass</span></a></span></span> iskindofclass和ismemberofclass区别</p>

<p>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<em><em><strong><br/>
本文由破船原创<br/>
转载请注明出处：<span style="text-decoration: underline;"><span style="color: #339966;"><strong><a href="http://www.beyondvincent.com/" target="_blank"><span style="color: #339966; text-decoration: underline;">BeyondVincent的博客</span></a></strong></span></span><br/>
_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong></em></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS设计模式(02):单例模式]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/05/09/20/"/>
    <updated>2013-05-09T00:00:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/05/09/20</id>
    <content type="html"><![CDATA[<h2><a href="http://beyondvincent.com/wp-content/uploads/2013/05/singleton-design-pattern.png"><img class="alignnone size-full wp-image-555" alt="singleton-design-pattern" src="http://beyondvincent.com/wp-content/uploads/2013/05/singleton-design-pattern.png" width="976" height="313" /></a></h2>

<h2><strong><span style="color: #339966;">什么是单例模式？</span></strong></h2>

<p><span style="text-decoration: underline;"><strong><span style="color: #339966;"><a href="http://en.wikipedia.org/wiki/Singleton_pattern" target="_blank"><span style="color: #339966; text-decoration: underline;">单例模式</span></a></span></strong></span>是一个类在系统中只有一个实例对象。通过全局的一个入口点对这个实例对象进行访问。在iOS开发中，单例模式是非常有用的一种设计模式。如下图，是一个单例模式的UML类图。</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/05/singleton_uml_class_structure.jpeg"><img class="alignnone size-full wp-image-551" alt="singleton_uml_class_structure" src="http://beyondvincent.com/wp-content/uploads/2013/05/singleton_uml_class_structure.jpeg" width="600" height="219" /></a></p>

<p>&nbsp;</p>

<p>iOS SDK中也有许多类使用了单例模式，例如，<span style="text-decoration: underline; color: #339966;"><strong><a href="http://developer.apple.com/library/ios/#DOCUMENTATION/UIKit/Reference/UIApplication_Class/Reference/Reference.html" target="_blank"><span style="color: #339966; text-decoration: underline;">UIApplication</span></a></strong></span>：当程序启动的时候，会调用UIApplicationMain方法，在该方法中，会实例化一个UIApplication对象，之后在程序中的任意地方调用sharedApplication方法都将返回一个与当前应用程序相关的UIApplication实例（UIApplicationMain方法中创建的UIApplication单例）。</p>

<h2><strong><span style="color: #339966;">什么时候使用单例模式？</span></strong></h2>

<p>在程序中，单例模式经常用于只希望一个类只有一个实例，而不运行一个类还有两个以上的实例。当然，在iOS SDK中，根据特定的需求，有些类不仅提供了单例访问的接口，还为开发者提供了实例化一个新的对象接口，例如，NSFileManager可以通过defaultManager方法返回相同的一个NSFileManager对象。如果需要新的一个NSFileManager实例对象，可以通过init方法。</p>

<h2><span style="color: #339966;"><strong>iOS中单例模式的实现 </strong></span></h2>

<p>iOS中单例模式的实现方式一般分为两种：Non-ARC(非ARC)和ARC+GCD。</p>

<ol>
<li><h3><strong><span style="color: #339966;">Non-ARC(非ARC)</span></strong></h3></li>
</ol>


<p>非ARC的实现方法如下所示：</p>

<p><span style="color: #339966;">BVNonARCSingleton.h</span></p>

<pre class="wp-code-highlight prettyprint linenums:1">//
//  BVNonARCSingleton.h
//  SingletonPattern
//
//  Created by BeyondVincent on 13-5-9.
//  Copyright (c) 2013年 BeyondVincent. All rights reserved.
//

#import &lt;Foundation/Foundation.h&gt;

@interface BVNonARCSingleton : NSObject

@property  ( nonatomic, retain) NSString  *tempProperty;
+ (BVNonARCSingleton *)sharedInstance; 

@end</pre>


<p><span style="color: #339966;">BVNonARCSingleton.m</span></p>

<pre class="wp-code-highlight prettyprint linenums:1">//
//  BVNonARCSingleton.m
//  SingletonPattern
//
//  Created by BeyondVincent on 13-5-9.
//  Copyright (c) 2013年 BeyondVincent. All rights reserved.
//

#import "BVNonARCSingleton.h"

@implementation BVNonARCSingleton

static BVNonARCSingleton *sharedInstance = nil;

// 获取一个sharedInstance实例，如果有必要的话，实例化一个
+ (BVNonARCSingleton *)sharedInstance {
    if (sharedInstance == nil) {
        sharedInstance = [[super allocWithZone:NULL] init];
    }

    return sharedInstance;
}

// 当第一次使用这个单例时，会调用这个init方法。
- (id)init
{
    self = [super init];

    if (self) {
        // 通常在这里做一些相关的初始化任务
    }

    return self;
}

// 这个dealloc方法永远都不会被调用--因为在程序的生命周期内容，该单例一直都存在。（所以该方法可以不用实现）
-(void)dealloc
{
    [super dealloc];
}

// 通过返回当前的sharedInstance实例，就能防止实例化一个新的对象。
+ (id)allocWithZone:(NSZone*)zone {
    return [[self sharedInstance] retain];
}

// 同样，不希望生成单例的多个拷贝。
- (id)copyWithZone:(NSZone *)zone {
    return self;
}

// 什么也不做——该单例并不需要一个引用计数（retain counter）
- (id)retain {
    return self;
}

// 替换掉引用计数——这样就永远都不会release这个单例。
- (NSUInteger)retainCount {
    return NSUIntegerMax;
}

// 该方法是空的——不希望用户release掉这个对象。
- (oneway void)release {

}

//除了返回单例外，什么也不做。
- (id)autorelease {
    return self;
}

@end</pre>


<p>实际上上面的代码苹果官网也有提供：<span style="text-decoration: underline;"><span style="color: #339966;"><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CocoaFundamentals/CocoaObjects/CocoaObjects.html#//apple_ref/doc/uid/TP40002974-CH4-SW32" target="_blank"><span style="color: #339966; text-decoration: underline;">Creating a Singleton Instance</span></a></span></span>，只不过没有给出头文件的定义。上面用非ARC实现单例的方法是线程不安全的，如果有多个线程同时调用sharedInstance方法获取一个实例，而sharedInstance方法需要花费1-2秒钟的时间，那么BVNonARCSingleton的init方法就可能会被多次调用，也就是不同线程获得的BVNonARCSingleton有可能不是同一个实例。怎么解决线程的不安全呢？答案是使用<span style="text-decoration: underline;"><span style="color: #339966;"><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html" target="_blank"><span style="color: #339966; text-decoration: underline;">@synchronized</span></a></span></span>来创建互斥锁即可。</p>

<pre class="wp-code-highlight prettyprint linenums:1">// 保证在实例化的时候是线程安全的（当然，该方法不能保证该单例中所有方法的调用都是线程安全的）
@synchronized (self)
{
    if(sharedInstance == nil)
    {
        sharedInstance = [[super allocWithZone:NULL] init];
    }
}</pre>


<p>通过上面的代码就能保存线程安全。<br/>
提醒：在iOS中，一般不建议使用非ARC来实现单例模式。更好的方法是使用ARC+GCD来实现。</p>

<ol start="2">
  <li>
    <h3>
      <strong><span style="color: #339966;">ARC+GCD</span></strong>
    </h3>
  </li>
</ol>


<p>通过ARC+GCD的方法来实现单例模式的非常简单的。下面先来看看具体实现：</p>

<p>BVARCSingleton.h</p>

<pre class="wp-code-highlight prettyprint linenums:1">//
//  BVARCSingleton.h
//  SingletonPattern
//
//  Created by BeyondVincent on 13-5-9.
//  Copyright (c) 2013年 BeyondVincent. All rights reserved.
//

#import &lt;Foundation/Foundation.h&gt;

@interface BVARCSingleton : NSObject

@property  ( nonatomic, weak) NSString  *tempProperty;
+ (BVARCSingleton *)sharedInstance;

@end</pre>


<p>BVARCSingleton.m</p>

<pre class="wp-code-highlight prettyprint linenums:1">//
//  BVARCSingleton.m
//  SingletonPattern
//
//  Created by BeyondVincent on 13-5-9.
//  Copyright (c) 2013年 BeyondVincent. All rights reserved.
//

#import "BVARCSingleton.h"

@implementation BVARCSingleton

+ (BVARCSingleton *) sharedInstance
{
    static  BVARCSingleton *sharedInstance = nil ;
    static  dispatch_once_t onceToken;  // 锁
    dispatch_once (&amp; onceToken, ^ {     // 最多调用一次
        sharedInstance = [[self  alloc] init];
    });
    return  sharedInstance;
}

// 当第一次使用这个单例时，会调用这个init方法。
- (id)init
{
    self = [super init];

    if (self) {
        // 通常在这里做一些相关的初始化任务
    }

    return self;
}

@end</pre>


<p>在上面的代码中，调用<span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://developer.apple.com/library/ios/#documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html" target="_blank"><span style="color: #339966; text-decoration: underline;">Grand Central Dispatch (GCD)</span></a></span></span>中的<span style="text-decoration: underline;"><span style="color: #339966;"><a href="https://developer.apple.com/library/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html#//apple_ref/c/func/dispatch_once" target="_blank"><span style="color: #339966; text-decoration: underline;">dispatch_once</span></a></span></span>方法就可以确保BVARCSingleton只被实例化一次。并且该方法是线程安全的，我们不用担心在不同的线程中，会获得不同的实例。（当然，该方法同样不能保证该单例中所有方法的调用都是线程安全的）。</p>

<p>当然，在ARC中，不用GCD也是可以做到线程安全的，跟之前非ARC代码中使用@synchronized一样，如下代码：</p>

<pre class="wp-code-highlight prettyprint linenums:1">// 不使用GCD，通过@synchronized
@synchronized (self)
{
    if(sharedInstance == nil)
    {
        sharedInstance = [[self alloc] init];
    }
}</pre>


<p>为了简化使用ARC+GCD来创建单例，可以定义下面这样的一个宏：</p>

<pre class="wp-code-highlight prettyprint linenums:1">#define DEFINE_SHARED_INSTANCE_USING_BLOCK(block) \
static dispatch_once_t onceToken = 0; \
__strong static id sharedInstance = nil; \
dispatch_once(&amp;onceToken, ^{ \
sharedInstance = block(); \
}); \
return sharedInstance; \</pre>


<p>实例化的实现方法如下所示：</p>

<pre class="wp-code-highlight prettyprint linenums:1">+ (BVARCSingleton *) sharedInstance
{
    DEFINE_SHARED_INSTANCE_USING_BLOCK(^{
        return [[self alloc] init];
    });
}</pre>


<h2><strong><span style="color: #339966;">单例的使用 </span></strong></h2>

<p>单例的使用方法很简单，在代码中的任意位置，如下使用即可：</p>

<p>在BVAppDelegate.m中添加头文件：</p>

<pre class="wp-code-highlight prettyprint linenums:1">#import "BVNonARCSingleton.h"
#import "BVARCSingleton.h"</pre>


<p>如下使用方法：</p>

<pre class="wp-code-highlight prettyprint linenums:1">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    [BVNonARCSingleton sharedInstance].tempProperty = @"非ARC单例的实现";
    NSLog(@"%@", [BVNonARCSingleton sharedInstance].tempProperty);

    [BVARCSingleton sharedInstance].tempProperty = @"ARC单例的实现";
    NSLog(@"%@", [BVARCSingleton sharedInstance].tempProperty);

    return YES;
}</pre>


<p>运行程序，会在控制台窗口输出如下内容：</p>

<pre class="wp-code-highlight prettyprint linenums:1">2013-05-09 16:44:07.649 SingletonPattern[5159:c07] 非ARC单例的实现
2013-05-09 16:44:33.204 SingletonPattern[5159:c07] ARC单例的实现</pre>


<h2><strong><span style="color: #339966;">代码实例</span></strong></h2>

<p>本文涉及到的相关实例代码和PDF归档可以到点击下图下载：</p>

<p><a href="https://github.com/BeyondVincent/ios_patterns/tree/master/SingletonPattern" target="_blank"><img class="alignnone size-full wp-image-561" alt="代码下载" src="http://beyondvincent.com/wp-content/uploads/2013/05/5555.png" width="150" height="150" /></a>            <a style="font-size: 1.5em;" href="https://github.com/BeyondVincent/ios_patterns/raw/master/SingletonPattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20For%20iOS-02-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.pdf" target="_blank"><img alt="pdf-icon" src="http://beyondvincent.com/wp-content/uploads/2013/05/pdf-icon.png" width="150" height="150" /></a></p>

<h2><strong><span style="color: #339966;">参考</span></strong></h2>

<p>本文在写作的时候，参考了许多网上的优秀文章，包括如下：</p>

<p><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://my.safaribooksonline.com/book/programming/objective-c/9781430233305/chapter-7-singleton/what_is_the_singleton_pattern_question#X2ludGVybmFsX0h0bWxWaWV3P3htbGlkPTk3ODE0MzAyMzMzMDUlMkZpbXBsZW1lbnRpbmdfYV9zaW5nbGV0b25faW5fb2JqZWN0aXZlJnF1ZXJ5PQ==" target="_blank"><span style="color: #339966; text-decoration: underline;">What Is the Singleton Pattern?</span></a></span></span>（Pro Objective-C Design Patterns for iOS书中对单例模式的介绍）<br/>
<span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://maleevdimka.wordpress.com/2013/01/30/ios-patterns-singleton/" target="_blank"><span style="color: #339966; text-decoration: underline;">ios-patterns-singleton</span></a></span></span>（需翻墙，是俄文的）<br/>
<span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://www.galloway.me.uk/tutorials/singleton-classes/" target="_blank"><span style="color: #339966; text-decoration: underline;">Singletons in Objective-C</span></a></span></span><br/>
<span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://www.johnwordsworth.com/2010/04/iphone-code-snippet-the-singleton-pattern/" target="_blank"><span style="color: #339966; text-decoration: underline;">Implementing a Singleton in Objective-C / iOS</span></a></span></span><br/>
<span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://developer.apple.com/library/ios/#documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html" target="_blank"><span style="color: #339966; text-decoration: underline;">Grand Central Dispatch (GCD) Reference</span></a></span></span>（dispatch_once的介绍）<br/>
<span style="text-decoration: underline; color: #339966;"><a href="http://blog.devtang.com/blog/2012/02/22/use-gcd/" target="_blank"><span style="color: #339966; text-decoration: underline;">使用GCD</span></a></span>（来自唐巧的一篇文章，对GCD总结不错）<br/>
<span style="text-decoration: underline;"><span style="color: #339966;"><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html" target="_blank"><span style="color: #339966; text-decoration: underline;">Threading Programming Guide</span></a></span></span>（@synchronized关键字的介绍）<br/>
<span style="text-decoration: underline;"><span style="color: #339966;"><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CocoaFundamentals/CocoaObjects/CocoaObjects.html" target="_blank"><span style="color: #339966; text-decoration: underline;">Cocoa Fundamentals Guide</span></a></span></span>（苹果官方给的一个非ARC单例实现）</p>

<p>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<em><em><strong><br/>
本文由破船原创<br/>
转载请注明出处：<span style="text-decoration: underline;"><span style="color: #339966;"><strong><a href="http://www.beyondvincent.com/" target="_blank"><span style="color: #339966; text-decoration: underline;">BeyondVincent的博客</span></a></strong></span></span><br/>
_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong></em></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS设计模式(01):观察者]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/05/05/18/"/>
    <updated>2013-05-05T00:00:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/05/05/18</id>
    <content type="html"><![CDATA[<h2><a href="http://beyondvincent.com/wp-content/uploads/2013/05/iOS-Observer-Pattern.png"><img class="alignnone size-full wp-image-517" title="点击查看大图" alt="iOS-Observer-Pattern" src="http://beyondvincent.com/wp-content/uploads/2013/05/iOS-Observer-Pattern.png" width="976" height="313" /></a></h2>

<h2><strong><span style="color: #339966;">什么是观察者模式</span></strong></h2>

<p>什么是<strong>观察者模式</strong>？你曾经订阅过报纸吗？在订阅报纸的时候，你不用去任何地方，只需要将你的个人地址信息以及订阅信息告诉出版社，出版社就知道如何将相关报纸传递给你。这种模式的第二个名称叫做<strong><span style="color: #339966;">发布/订阅模式</span></strong>。</p>

<p>在GoF中是这样描述观察者模式的——观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</p>

<p><span>观察者模式的的思想非常简单，Subject（主题）允许别的对象——观察者（这些对象实现了观察者接口）对这个Subject的改变进行订阅和取消订阅。当Subject发生了变化——那么Subject会将这个变化发送给所有的观察者，观察者就能对Subject的变化做出更新。在这里，Subject是报纸的出版社，而观察者则是订阅报纸的我和你，当Subject发生变化——有新的报纸，会做出通知——将报纸发送给所有的订阅者。</span></p>

<h2><strong><span style="color: #339966;">什么时候使用观察者模式？</span></strong></h2>

<ol>
<li><span style="line-height: 13px;">当你需要将改变通知所有的对象时，而你又不知道这些对象的具体类型，此时就可以使用观察者模式。</span></li>
<li>改变发生在同一个对象中，并在别的地方需要将相关的状态进行更新。</li>
</ol>


<h2><strong><span style="color: #339966;">iOS中观察者模式的实现方法</span></strong></h2>

<p>在iOS中观察者模式的实现有三种方法：</p>

<ol>
<li><h3><span style="color: #339966;">Notification</span></h3></li>
</ol>


<p>Notification - NotificationCenter机制使用了操作系统的功能。通过NSNotificationCenter可以让对象之间进行进行通讯，这些对象相互间可以不认识。当你用一个并行的流来推送通知，或者刷新数据库，并希望在界面中能够看到时，这非常有用。</p>

<p>NotificationCenter发布消息的方法如下所示：</p>

<pre class="wp-code-highlight prettyprint linenums:1">NSNotification  * broadcastMessage = [ NSNotification  notificationWithName: AnyNotification  object: Self ];
NSNotificationCenter  * notificationCenter = [ NSNotificationCenter  defaultCenter];
[NotificationCenter postNotification: broadCastMessage];</pre>


<p>上面的代码中，创建了一个NSNotification类型的对象，并指定名称为&#8221;broadcastMessage&#8221;，然后通过notificationCenter来发布这个消息。</p>

<p>要订阅感兴趣的对象中的相关事件，可以按照如下方法进行：</p>

<pre class="wp-code-highlight prettyprint linenums:1">NSNotificationCenter  * notificationCenter = [ NSNotificationCenter  defaultCenter];
[NotificationCenter addObserver: Self  selector: @ selector (update:) name: AnyNotification  object: nil ];</pre>


<p>如上代码所示：订阅了一个事件，并通过@selector指定了一个方法。</p>

<pre class="wp-code-highlight prettyprint linenums:1">// 收到通知中心发来的通知
-(void)update:(NSNotification *) notification
{
    if ([[notification name] isEqualToString:AnyNotification])
        NSLog (@"成功收到通知中心发来的名为%@的通知", AnyNotification);
}</pre>


<p>下面是运行上面代码，在控制台输出的内容：</p>

<pre class="wp-code-highlight prettyprint linenums:1">2013-05-05 23:43:15.570 ObserverPattern[1738:c07] 成功收到通知中心发来的名为broadcastMessage的通知</pre>




<ol start="2">
  <li>
    <h3>
      <span style="line-height: 13px; color: #339966;"> KVO</span>
    </h3>
  </li>
</ol>


<p>通过KVO，某个对象中的特定属性发生了改变，别的对象可以获得通知。苹果官方文档对KVO有了很好的解释：<span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://developer.apple.com/library/ios/#documentation/cocoa/conceptual/KeyValueObserving/KeyValueObserving.html" target="_blank"><span style="color: #339966; text-decoration: underline;">Key-Value Observing Programming Guide</span></a></span></span>。下面两种方法都可以改变对象中属性的值：</p>

<pre class="wp-code-highlight prettyprint linenums:1">kvoSubj.changeableProperty = @"新的一个值";

[kvoSubj setValue:@"新的一个值" forKey:@"changeableProperty"];</pre>


<p>上面这种值改变的灵活性可以让我们对键值进行观察。</p>

<p>下面是新建的一个类KVOSubject，这个类中有一个属性changeableProperty：</p>

<pre class="wp-code-highlight prettyprint linenums:1">@interface KVOSubject : NSObject

@property (nonatomic, strong) NSString *changeableProperty;

@end

@implementation KVOSubject

@end</pre>


<p>接着新建了另外一个类KVOObserver，通过该类可以监听changeableProperty属性值的改变。</p>

<pre class="wp-code-highlight prettyprint linenums:1">@interface KVOObserver : NSObject
@end

@implementation KVOObserver

-(void) observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context
{
    NSLog(@"KVO:值发生了改变");
}

@end</pre>


<p>如上代码所示，KVOObserver类只有一个方法observeValueForKeyPath。当changeableProperty属性值的改变时，这个方法会被调用。下面是测试的代码：</p>

<pre class="wp-code-highlight prettyprint linenums:1">- (IBAction)btnKVOObservationTest:(id)sender {
    KVOSubject *kvoSubj = [[KVOSubject alloc] init];
    KVOObserver *kvoObserver = [[KVOObserver alloc] init];

    [kvoSubj addObserver:kvoObserver forKeyPath:@"changeableProperty"
                 options:NSKeyValueObservingOptionNew context:nil];

    kvoSubj.changeableProperty = @"新的一个值";

    [kvoSubj setValue:@"新的一个值" forKey:@"changeableProperty"];

    [kvoSubj removeObserver:kvoObserver forKeyPath:@"changeableProperty"];
}</pre>


<p>执行上面的代码，可以看到控制台输出如下结果：</p>

<pre class="wp-code-highlight prettyprint linenums:1">2013-05-05 23:10:20.789 ObserverPattern[1358:c07] KVO:值发生了改变
2013-05-05 23:10:20.790 ObserverPattern[1358:c07] KVO:值发生了改变</pre>




<ol start="3">
  <li>
    <h3>
      <span style="color: #339966;">标准方法</span>
    </h3>
  </li>
</ol>


<p>先来看看Gof中对观察者模式定义的结构图：</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/05/Observer-Structure.jpg"><img class="alignnone size-full wp-image-512" alt="Observer-Structure" src="http://beyondvincent.com/wp-content/uploads/2013/05/Observer-Structure.jpg" width="615" height="243" /></a></p>

<p>标准方法的实现是这样的：Subject（主题）知道所有的观察者，但是不知道它们的类型。下面我们就从创建Subject和Observer（观察者）的协议（protocol）开始。</p>

<pre class="wp-code-highlight prettyprint linenums:1">@protocol StandardObserver 
-(void) valueChanged:(NSString *)valueName newValue:(NSString *) newValue;
@end

@protocol StandardSubject 
-(void) addObserver:(id) observer;
-(void) removeObserver:(id) observer;
-(void) notifyObjects;
@end</pre>


<p>下面，我们来创建一个Subject的implementation （实现）</p>

<pre class="wp-code-highlight prettyprint linenums:1">@interface StandardSubjectImplementation : NSObject 
{
    @private NSString *_valueName;
    @private NSString *_newValue;
}
@property (nonatomic, strong) NSMutableSet *observerCollection;
-(void)changeValue:(NSString *)valueName andValue:(NSString *) newValue;
@end

@implementation StandardSubjectImplementation

-(NSMutableSet *) observerCollection
{
    if (_observerCollection == nil)
        _observerCollection = [[NSMutableSet alloc] init];

    return _observerCollection;
}

-(void) addObserver:(id)observer
{
    [self.observerCollection addObject:observer];
}

-(void) removeObserver:(id)observer
{
    [self.observerCollection removeObject:observer];
}

-(void) notifyObjects
{
    for (id observer in self.observerCollection) {
        [observer valueChanged: _valueName newValue:_newValue];
    }
}

-(void)changeValue:(NSString *)valueName andValue:(NSString *) newValue
{
    _newValue = newValue;
    _valueName = valueName;
    [self notifyObjects];
}
@end</pre>


<p>接下来是Observer的implementation （实现）：</p>

<pre class="wp-code-highlight prettyprint linenums:1">@interface SomeSubscriber : NSObject 
@end

@implementation SomeSubscriber
-(void) valueChanged:(NSString *)valueName newValue:(NSString *)newValue
{
    NSLog(@"SomeSubscriber输出: 值 %@ 已变为 %@", valueName, newValue);
}
@end

@interface OtherSubscriber : NSObject 

@end

@implementation OtherSubscriber

-(void) valueChanged:(NSString *)valueName newValue:(NSString *)newValue
{
    NSLog(@"OtherSubscriber输出: 值 %@ 已变为 %@", valueName, newValue);
}
@end</pre>


<p>下面是演示的代码：</p>

<pre class="wp-code-highlight prettyprint linenums:1">StandardSubjectImplementation * subj = [[StandardSubjectImplementation alloc] init];
SomeSubscriber * someSubscriber = [[SomeSubscriber alloc] init];
OtherSubscriber * otherSubscriber = [[OtherSubscriber alloc] init];

[Subj addObserver: someSubscriber];
[Subj addObserver: otherSubscriber];

[subj changeValue:@"version" andValue:@"1.0.0"];</pre>


<p>上面代码运行的log如下所示：</p>

<pre class="wp-code-highlight prettyprint linenums:1">2013-05-05 23:19:04.662 ObserverPattern[1459:c07] OtherSubscriber输出: 值 version 已变为 1.0.0
2013-05-05 23:19:04.664 ObserverPattern[1459:c07] SomeSubscriber输出: 值 version 已变为 1.0.0</pre>


<h2><span style="color: #339966;"><strong>代码实例</strong></span></h2>

<p>本文涉及到的相关实例代码和PDF归档可以到点击下图下载：</p>

<p><a href="https://github.com/BeyondVincent/ios_patterns/tree/master/ObserverPattern" target="_blank"><img alt="代码下载" src="http://beyondvincent.com/wp-content/uploads/2013/05/5555.png" width="150" height="150" /></a>            <a href="https://github.com/BeyondVincent/ios_patterns/raw/master/ObserverPattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20For%20iOS-01-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.pdf" target="_blank"><img alt="pdf-icon" src="http://beyondvincent.com/wp-content/uploads/2013/05/pdf-icon.png" width="150" height="150" /></a></p>

<p>&nbsp;</p>

<p>美文推荐：<span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://blog.shinetech.com/2011/06/14/delegation-notification-and-observation/" target="_blank"><span style="color: #339966; text-decoration: underline;">When to use Delegation, Notification, or Observation in iOS</span></a></span></span></p>

<p>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_____</p>

<p>本文由破船原创<br/>
转载请注明出处：<span style="text-decoration: underline;"><span style="color: #339966;"><strong><a href="http://www.beyondvincent.com/" target="_blank"><span style="color: #339966; text-decoration: underline;">BeyondVincent的博客</span></a></strong></span></span><br/>
_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_____</p>
]]></content>
  </entry>
  
</feed>
