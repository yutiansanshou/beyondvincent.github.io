<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS7 | 破船之家]]></title>
  <link href="http://BeyondVincent.github.io/blog/categories/ios7/atom.xml" rel="self"/>
  <link href="http://BeyondVincent.github.io/"/>
  <updated>2014-03-24T00:11:12+08:00</updated>
  <id>http://BeyondVincent.github.io/</id>
  <author>
    <name><![CDATA[破船(BeyondVincent)]]></name>
    <email><![CDATA[beyondvincent@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS 7 教程：让程序同时支持iOS 6和iOS 7]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/11/19/122-working-with-ios-6-and-7/"/>
    <updated>2013-11-19T22:18:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/11/19/122-working-with-ios-6-and-7</id>
    <content type="html"><![CDATA[<p><img src="/images/2013/11/35.png" alt="" /></p>

<!--more-->


<p>注：本文由破船译自<a href="http://blog.ittybittyapps.com/blog/2013/11/08/working-with-ios-6-and-7/">Itty Bitty Labs</a>。</p>

<ol>
<li><a href="#1">iOS 7中的布局问题</a></li>
<li><a href="#2">iOS 6运行异常</a></li>
<li><a href="#3">Xcode 4编译错误</a></li>
<li><a href="#4">UILabel不一致的background</a></li>
<li><a href="#5">全屏时隐藏状态栏</a></li>
<li><a href="#6">UIToolbar barStyle</a></li>
<li><a href="#7">更多</a></li>
</ol>


<p>由于各种原因，我们的程序需要同时支持iOS 7以及之前的版本(例如iOS 6)，也就是说开发者不得不同时在iOS 7和iOS 6之间进行开发。实际上开发者对此是比较讨厌的。</p>

<h3><a id="1"></a>iOS 7中的布局问题</h3>

<p>下面是非常简单的一个程序，运行在iOS 6中的界面：</p>

<p><img src="/images/2013/11/36.png" alt="" /></p>

<p>而要是运行在iOS 7的模拟器中，会看不到label了：</p>

<p><img src="/images/2013/11/37.png" alt="" /></p>

<p>这是为什么呢？我们对其reveal一下看看吧：</p>

<p><img src="/images/2013/11/38.png" alt="" /></p>

<p>从上图可以看出，实际上label躲在NavigationBar后面了。在iOS 7中，苹果引入了一个新的属性，叫做<code>[UIViewController setEdgesForExtendedLayout:]</code>，它的默认值为<code>UIRectEdgeAll</code>。当你的容器是navigation controller时，默认的布局将从navigation bar的顶部开始。这就是为什么所有的UI元素都往上漂移了44pt。</p>

<p>修复这个问题的快速方法就是在方法<code>- (void)viewDidLoad</code>中添加如下一行代码：</p>

<p><code>objc
self.edgesForExtendedLayout = UIRectEdgeNone;
</code></p>

<p>这样问题就修复了。</p>

<p><img src="/images/2013/11/39.png" alt="" /></p>

<h3><a id="2"></a>iOS 6运行异常</h3>

<p>现在如果在iOS 6中运行程序，会遇到下面这样的运行时异常错误：</p>

<p><code>objc
</code></p>

<p>所有只能在iOS 7中运行的API需要重新封装一下，如下代码所示：</p>

<p>```objc
if ([self respondsToSelector:@selector(setEdgesForExtendedLayout:)])
{</p>

<pre><code>self.edgesForExtendedLayout = UIRectEdgeNone;
</code></pre>

<p>}
```</p>

<h3><a id="3"></a>Xcode 4编译错误</h3>

<p>有些机器可能还在使用Xcode 4.6，当用4.6来编译代码时，会遇到下面的编译错误：</p>

<p><code>objc
Property 'edgesForExtendedLayout' not found on object of type 'LAViewController *'
Use of undeclared identifier 'UIRectEdgeNone'
</code></p>

<p>为了避免这个错误，可以创建下面的这个宏：</p>

<p>```objc</p>

<h1>if __IPHONE_OS_VERSION_MAX_ALLOWED >= 70000</h1>

<h1>define IOS7_SDK_AVAILABLE 1</h1>

<h1>endif</h1>

<p>```
然后在需要的地方将iOS 7的代码包装一下即可：</p>

<p>```objc</p>

<h1>ifdef IOS7_SDK_AVAILABLE</h1>

<p>&hellip;</p>

<h1>endif</h1>

<p>```</p>

<h3><a id="4"></a>UILabel不一致的background</h3>

<p>对于UILabel，在iOS 7中它的background颜色默认是clearColor，而在iOS 6中默认的是白色。所以，我们最好在代码中对label的background颜色进行明确的设置：</p>

<p><code>objc
view.backgroundColor = [UIColor clearColor];
</code></p>

<h3><a id="5"></a>全屏时隐藏状态栏</h3>

<p>在iOS 6中，当调用<code>presentViewController</code>时，默认的modal screen将是全屏(<code>UIModalPresentationFullScreen</code>)。为了在iOS 7中也能获得相同的效果，我们可以在modal controller中添加如下代码：</p>

<p><code>objc
- (BOOL)prefersStatusBarHidden
{
  return YES;
}
</code></p>

<h3><a id="6"></a>UIToolbar barStyle</h3>

<p>有时候，我们会将UIToolbar与系统键盘结合起来使用。而在iOS 6中的键盘是黝黑色的，此时toolbar的style一般也是类似的，如下代码所示：</p>

<p><code>objc
self.barStyle = UIBarStyleBlack;// or UIBarStyleBlackTranslucents
</code></p>

<p>而在iOS 7中，键盘变为了亮色，因此我们需要根据不同的iOS 版本，设置不同的bar style。</p>

<p>```objc
if ([[[UIDevice currentDevice] systemVersion] compare:@&ldquo;7.0&rdquo; options:NSNumericSearch] != NSOrderedAscending)
{</p>

<pre><code>self.barStyle = UIBarStyleDefault;
</code></pre>

<p>}
else
{</p>

<pre><code>self.barStyle = UIBarStyleBlack;//or UIBarStyleBlackTranslucent
</code></pre>

<p>}
```</p>

<h3><a id="7"></a>更多</h3>

<p>上面这些技巧是我目前在开发中遇到的，肯定还有更多的技巧，大家要是知道的话可以告诉我。</p>

<p>最后送大家一个图，看看相关差异吧：</p>

<p><img src="/images/2013/11/40.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 7 教程：浅析Text Kit]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/11/12/121-brief-analysis-text-kit/"/>
    <updated>2013-11-12T12:55:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/11/12/121-brief-analysis-text-kit</id>
    <content type="html"><![CDATA[<p><img src="/images/2013/11/22.png" alt="" /></p>

<!--more-->


<p>注：本文由破船原创，并投稿至<a href="http://tiny4cocoa.com/thread/show/57/">Tiny4Cocoa iOS开发杂志</a>。</p>

<p>Text Kit是iOS 7中引入的一个新功能，非常值得开发者使用，下面先看看本文的目录结构：</p>

<ol>
<li><a href="#1">什么是Text Kit</a></li>
<li><a href="#2">Text Kit架构</a></li>
<li><a href="#3">Text Kit特点</a></li>
<li><a href="#4">Text Kit功能概述</a></li>
<li><a href="#5">Text Kit中重要的一些对象</a></li>
<li><a href="#6">Text Kit示例</a></li>
<li><a href="#7">小结</a></li>
<li><a href="#8">推荐Text Kit学习资源</a></li>
</ol>


<h3><a id="1"></a>什么是Text Kit</h3>

<p>在iOS7中，苹果引入了<code>Text Kit</code>——Text Kit是一个快速而又现代化的文字排版和渲染引擎。Text Kit在UIKit framework中的定义了一些类和相关协议，它最主要的作用就是为程序提供文字排版和渲染的功能。在程序中，通过Text Kit可以对文字进行存储(store)、布局(lay out)，以及用最精细的排版方式(例如文字间距、换行和对齐等)来显示文本内容。
苹果引入Text Kit的目的并非要取代已有的Core Text，Core Text的主要作用也是用于文字的排版和渲染中，它是一种先进而又处于底层技术，如果我们需要将文本内容直接渲染到图形上下文(Graphics context)时，从性能和易用性来考虑，最佳方案就是使用Core Text。而如果我们直接利用苹果提供的一些控件(例如UITextView、UILabel和UITextField等)对文字进行排版，无疑就是借助于UIkit framework中Text Kit提供的API。</p>

<h3><a id="2"></a>Text Kit架构</h3>

<p>下面，我们通过图1(此图来自WWDC2013 Session 210)来了解一下Text Kit的架构。图1是基于iOS 7绘制的，从图中，我们可以看到Text Kit是基于Core Text构建的，它通过Core Text与Core Graphics进行交互。而UI控件(UILabel、UITextField和UITextView)则构建于Text Kit之上，可见这些文本控件可以利用Text Kit提供的API来对文字进行排版和渲染处理。
从图中我们也可以看到SDK提供的UIWebView是基于WebKit的，它不能使用Text Kit提供的功能。</p>

<p><img src="/images/2013/11/23.jpg" alt="图1 Text Kit在iOS 7 SDK中的位置" /></p>

<p>我们再来看看图1中的相关组件在iOS6里面是如何对应的，如图2所示，可以看出在iOS 6中是没有Text Kit，并且UILabel、UIText和UITextView是基于String Drawing和WebKit构建的。其中String Drawing是与Core Graphics直接通讯。</p>

<p><img src="/images/2013/11/24.jpg" alt="图2 在iOS 6中并没有Text Kit" /></p>

<h3><a id="3"></a>Text Kit特点</h3>

<p>从上面的介绍中，我们可以了解到Text Kit在UIKit中的作用非常重要。Text Kit在实际开发中具有如下特点：</p>

<ul>
<li>在UI控件中Text Kit完全掌控着文字的排版和渲染</li>
<li>UITextView、UITextField和UILabel是构建于Text Kit之上的</li>
<li>能够与动画、UICollectionView和UITableView做到无缝集成</li>
<li>Text Kit具有这样一些能力：Subclassing、Delegation和Notifcation。</li>
</ul>


<h3><a id="4"></a>Text Kit功能概述</h3>

<p>下面我们看看通过Text Kit，都能实现那些功能(这里列出了是一些常用和重要功能)：</p>

<ul>
<li>对文字进行分页或多列排版</li>
<li>支持文字的换行、折叠和着色等处理</li>
<li>可以调整字与字之间的距离、行间距、文字大小、指定特定的字体</li>
<li>支持富文本编辑，可以自定义文字截断</li>
<li>支持凸版印刷效果(letterpress)</li>
<li>支持数据类型的检测(例如链接、附件等)</li>
</ul>


<p>如图3，是利用Text Kit对文字做的分页排版</p>

<p><img src="/images/2013/11/25.jpg" alt="图3 利用Text Kit做的分页排版效果" /></p>

<p>再看图4，是利用Text Kit做的换行处理，其中对某个路径范围做了排除。</p>

<p><img src="/images/2013/11/26.jpg" alt="图4 利用Text Kit做的换行处理效果" /></p>

<p>再来看看利用Text Kit做的凸版印刷效果，如图5所示</p>

<p><img src="/images/2013/11/27.jpg" alt="图5 利用Text Kit做的凸版印刷效果" /></p>

<h3><a id="5"></a>Text Kit中重要的一些对象</h3>

<p>下面我们来看看Text Kit中重要的几个对象。</p>

<p><img src="/images/2013/11/28.jpg" alt="图6 Text Kit中重要的几个对象" /></p>

<p>如图6所示，Text Kit中主要有4个重要的对象。</p>

<ul>
<li>Text View是用来显示文本内容的控件，主要包括UILabel、UITextView和UITextField。</li>
<li>Text containers对应着NSTextContainer类。NSTextContainer定义了文本可以排版的区域。一般来说，都是矩形区域，当然，也可以根据需求，通过子类化NSTextContainer来创建别的一些形状，例如圆形、不规则的形状等。NSTextContainer不仅可以创建文本可以填充的区域，它还维护着一个数组——该数组定义了一个区域，排版的时候文字不会填充该区域，因此，我们可以在排版文字的时候，填充非文本元素(例如图片，如图4所示)。</li>
<li>Layout manager对应着NSLayoutManager类。该类负责对文字进行编辑排版处理——通过将存储在NSTextStorage中的数据转换为可以在视图控件中显示的文本内容，并把统一的字符编码映射到对应的字形(glyphs)上，然后将字形排版到NSTextContainer定义的区域中。</li>
<li>Text storage对应着NSTextStorage类。该类定义了Text Kit扩展文本处理系统中的基本存储机制。NSTextStorage继承自NSmutableAttributedString，主要用来存储文本的字符和相关属性。另外，当NSTextStorage中的字符或属性发生了改变，会通知NSLayoutManager，进而做到文本内容的显示更新。</li>
</ul>


<p>通常情况下，NSTextStorage、NSLayoutManager和NSTextContainer是一一对应的。如图7所示关系：</p>

<p><img src="/images/2013/11/29.jpg" alt="图7 普通排版" /></p>

<p>当然，如果需要将文字显示为多列，或多页，可以按照如图8所示关系——使用多个NSTextContainer。</p>

<p><img src="/images/2013/11/30.jpg" alt="图8 多页或者多列排版" /></p>

<p>如果针对不同的排版方式，则可以使用多个NSLayoutManager，如图9所示</p>

<p><img src="/images/2013/11/31.jpg" alt="图9 不同的排版方式" /></p>

<p>如图10所示，通过形象的方式，对UITextView的组成做了分解。通常，我们在设备上只能看到最右边的文本显示界面，而内部的NSTextStorage、NSLayoutManager和NSTextContainer是看不出来的。通常由NSLayoutManager从NSTextStorage中读取出文本数据，然后根据一定的排版方式，将文本排版到NSTextContainer中，再由NSTextContainer结合UITextView将最终效果显示出来。</p>

<p><img src="/images/2013/11/32.jpg" alt="图10 UITextView的分解" /></p>

<h3><a id="6"></a>Text Kit示例</h3>

<p>前面对Text Kit做了一些介绍，下面我们配合一个例子(图文排版)，来进一步加深对Text Kit的认识。具体实现步骤如下</p>

<ol>
<li>打开Xcode 5，新建一个Single View Application模板的程序，将工程命名为ExclusionPath。</li>
<li>打开Main.storyboard文件，然后再默认View Controller的View里面分别添加一个UITextView和UIImageView。并将这两个控件连接到ViewController.h中(名称分别为textView何imageView)。然后给textView设置一些字符串，imageView设置一个图片。</li>
<li>打开ViewController.m文件，找到viewDidLoad方法，用如下代码替换该方法：</li>
</ol>


<p>```objc
&ndash; (void)viewDidLoad
{</p>

<pre><code>[super viewDidLoad];

//创建一个平移手势对象，该对象可以调用imagePanned：方法
UIPanGestureRecognizer *panGes = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(imagePanned:)];
[self.imageView addGestureRecognizer:panGes];

self.textView.textContainer.exclusionPaths = @[[self translatedBezierPath]];
</code></pre>

<p>}
```</p>

<p>在上面的代码中，给imageView添加了一个平移手势。另外通过调用translatedBezierPath方法，给textView的textContainer设置exclusionPaths属性值。表示需要排除的区域（也就是图片在排版中显示的位置）。</p>

<ol>
<li>下面来看一下translatedBezierPath方法的实现，如下代码所示</li>
</ol>


<p>```objc
&ndash; (UIBezierPath *)translatedBezierPath
{</p>

<pre><code>CGRect butterflyImageRect = [self.textView convertRect:self.imageView.frame fromView:self.view];
UIBezierPath *newButterflyPath = [UIBezierPath bezierPathWithRect:butterflyImageRect];

return newButterflyPath;
</code></pre>

<p>}
```</p>

<p>在上面的代码中，利用imageView的frame属性创建了一个UIBezierPath，然后将该值返回。
5. 还记得第3步中创建的平移手势吗。里面有一个action需要实现imagePanned:，下面来看看这个方法的实现：</p>

<p>```objc
&ndash; (void)imagePanned:(id)sender
{</p>

<pre><code>if ([sender isKindOfClass:[UIPanGestureRecognizer class]]) {
    UIPanGestureRecognizer *localSender = sender;

    if (localSender.state == UIGestureRecognizerStateBegan) {
        self.gestureStartingPoint = [localSender translationInView:self.textView];
        self.gestureStartingCenter = self.imageView.center;
    } else if (localSender.state == UIGestureRecognizerStateChanged) {
        CGPoint currentPoint = [localSender translationInView:self.textView];

        CGFloat distanceX = currentPoint.x - self.gestureStartingPoint.x;
        CGFloat distanceY = currentPoint.y - self.gestureStartingPoint.y;

        CGPoint newCenter = self.gestureStartingCenter;

        newCenter.x += distanceX;
        newCenter.y += distanceY;

        self.imageView.center = newCenter;

        self.textView.textContainer.exclusionPaths = @[[self translatedBezierPath]];
    } else if (localSender.state == UIGestureRecognizerStateEnded) {
        self.gestureStartingPoint = CGPointZero;
        self.gestureStartingCenter = CGPointZero;
    }
}
</code></pre>

<p>}</p>

<p>```</p>

<p>在上面的代码中首先根据平移的距离来设置imageView的位置，然后利用translatedBezierPath方法重新计算了一下排除区域。
6. 至此代码编写完毕，下面来运行程序，看看实际效果。如图11所示：</p>

<p><img src="/images/2013/11/33.gif" alt="图11 运行效果" /></p>

<ol>
<li>点击下图，下载代码</li>
</ol>


<p><a href="https://github.com/BeyondVincent/iOS7-new-feature/tree/master/code/TextKit/ExclusionPath"><img src="/images/2013/11/34.jpg" alt="" /></a></p>

<h3><a id="7"></a>小结</h3>

<p>实际上，上面的示例，只是揭秘了Text Kit功能的冰山一角。从iOS7及以后的版本中，Text Kit在UIKit framework里面占据重要的地位，Text Kit在文字处理方面，具有非常强大的功能，并且开发者可以对Text Kit进行定制和扩展。据悉，苹果利用了2年的时间来开发Text Kit，相信这对许多开发者来说都是福音。</p>

<h3><a id="8"></a>推荐Text Kit学习资源</h3>

<p>更多关于Text Kit的学习资料，请参考下面的内容：</p>

<p>wwdc视频:</p>

<ul>
<li>Introducing Text Kit</li>
<li>Advanced Text Layouts and Effects with Text Kit</li>
<li>Using Fonts with Text Kit</li>
</ul>


<p>苹果官方参考文档：</p>

<ul>
<li>Text Programming Guide for iOS.pdf</li>
<li>NSLayoutManager Class Reference for iOS.pdf</li>
<li>NSLayoutManagerDelegate Protocol Reference for iOS.pdf</li>
<li>NSTextContainer Class Reference for iOS.pdf</li>
<li>NSTextStorage Class Reference for iOS.pdf</li>
<li>NSTextStorageDelegate Protocol Reference for iOS.pdf</li>
</ul>


<p>苹果官方示例：</p>

<ul>
<li>IntroToTextKit</li>
</ul>

]]></content>
  </entry>
  
</feed>
